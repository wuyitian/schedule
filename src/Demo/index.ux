<template>
  <!-- template里只能有一个根节点 -->
  <div class="demo-page">
    <text class="title">正在进行的任务</text>
    <!--已经创建的任务-->
    <div class="tutorial-row" for="{{toDoList}}">
      <input  if="{{!$item.done}}" type="checkbox" checked="{{$item.done}}"  onchange="changeCheckbox($idx)" />
      <text  if="{{!$item.done}}">{{$item.name}} - {{$item.startDate}} {{$item.startTime}}</text>
    </div>

    <!-- 点击跳转创建日程 -->
    <input class="btn" type="button" value="创建日程" onclick="routeDetail" />

    <div style="height: 100px"></div>

    <text class="title">已完成的任务</text>
    <!--已经完成的任务-->
    <div class="tutorial-row" for="{{toDoList}}">
      <input  if="{{$item.done}}" type="checkbox" checked="{{$item.done}}"  onchange="changeCheckbox($idx)"/>
      <text  if="{{$item.done}}">{{$item.name}} - {{$item.startDate}} {{$item.startTime}} </text>
    </div>
    <!--<text>{{task.name}}</text>-->


  </div>
</template>

<style>
  .demo-page {
    flex-direction: column;
    /*justify-content: center;*/
    /*align-items: center;*/
  }

  .title {
    font-size: 40px;
    text-align: center;
  }

  .btn {
    width: 750px;
    height: 86px;
    margin-top: 75px;
    border-radius: 43px;
    background-color: #09ba07;
    font-size: 30px;
    color: #ffffff;
  }
</style>

<script>
  import router from '@system.router'
  import storage from '@system.storage'
  import prompt from '@system.prompt'
  export default {
    // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
    private: {
      title: '高效日程',
      toDoList: [
        {
          name: '开会',
          startDate: '2018-11-28',
          startTime: '09:30',
          startDateTime: '',
          endDate: '',
          endTime: '',
          endDateTime: '',
          tipsTime: '15',
          done: false
        },
        {
          name: '工作汇报',
          startDate: '2018-11-28',
          startTime: '11:30',
          startDateTime: '',
          endDate: '',
          endTime: '',
          endDateTime: '',
          tipsTime: '15',
          done: false
        },
        {
          name: '给亲爱的买早餐',
          startDate: '2018-11-26',
          startTime: '08:00',
          startDateTime: '',
          endDate: '',
          endTime: '',
          endDateTime: '',
          tipsTime: '15',
          done: true
        }
      ]
    },
    // protected: {
    //   task: {
    //     name: '示例任务',
    //     startDate: '',
    //     startTime: '',
    //     startDateTime: '',
    //     endDate: '',
    //     endTime: '',
    //     endDateTime: '',
    //     tipsTime: '15',
    //     done: false
    //   }
    // },
    onShow () {
      // 页面被切换显示时，从数据中检查是否有页面B传递来的数据
      if (this.$app.$data.dataPageB && this.$app.$data.dataPageB.gotoPage === 'pageA') {
        // 从数据中获取回传给本页面的数据
        const data = this.$app.$data.dataPageB.params
        if(data.task.name && data.task.startDate && data.task.startTime && this.toDoList.indexOf(data.task)===-1){
          this.toDoList.push(data.task)
        }
        // this.setStorage('toDoListLength',this.toDoList.length)
        // for(let i=0;i<this.toDoList.length;i++){
        //   this.setStorage('toDoList'+'_name'+i,this.toDoList[i].name)
        //   this.setStorage('toDoList'+'_startDate'+i,this.toDoList[i].startDate)
        //   this.setStorage('toDoList'+'_startTime'+i,this.toDoList[i].startTime)
        //   this.setStorage('toDoList'+'_endDate'+i,this.toDoList[i].endDate)
        //   this.setStorage('toDoList'+'_endTime'+i,this.toDoList[i].endTime)
        //   this.setStorage('toDoList'+'_tipsTime'+i,this.toDoList[i].tipsTime)
        //   this.setStorage('toDoList'+'_done'+i,this.toDoList[i].done)
        // }
      }
      // var toDoListLength=this.getStorageUseAsync('toDoListLength')
      // this.toDoList.slice(0,this.toDoList.length)
      // for(let i=0;i<toDoListLength;i++){
      //   var task={
      //     name: '',
      //     startDate: '',
      //     startTime: '',
      //     startDateTime: '',
      //     endDate: '',
      //     endTime: '',
      //     endDateTime: '',
      //     tipsTime: '15',
      //     done: false
      //   }
      //   task.name=this.getStorageUseAsync('toDoList'+'_name'+i)
      //   task.startDate=this.getStorageUseAsync('toDoList'+'_startDate'+i)
      //   task.startTime=this.getStorageUseAsync('toDoList'+'_startTime'+i)
      //   task.endDate=this.getStorageUseAsync('toDoList'+'_endDate'+i)
      //   task.endTime=this.getStorageUseAsync('toDoList'+'_endTime'+i)
      //   task.tipsTime=this.getStorageUseAsync('toDoList'+'_tipsTime'+i)
      //   task.done=this.getStorageUseAsync('toDoList'+'_done'+i)
      //   if(task.name && task.startDate && task.startTime){
      //     this.toDoList.push(task)
      //   }
      // }
    },
    routeDetail () {
      // 跳转到应用内的某个页面，router用法详见：文档->接口->页面路由
      router.push ({
        uri: '/DemoDetail'
      })
    },
    changeCheckbox(idx,e){
      this.toDoList[idx].done = !this.toDoList[idx].done
    },
    onInit() {
      this.$on('task', this.taskHandler)
    },
    taskHandler(){
      this.toDoList.push(this.task)
    },
     setStorage (storageKey,storageValue) {
      if (storageKey && storageValue) {
         storage.set({
          key: storageKey,
          value: storageValue,
        })
        prompt.showToast({
          message: '{key:' + storageKey + ',value:' + storageValue + '}'
        })
      }
      // else {
      //   prompt.showToast({
      //     message: '请输入key和value值'
      //   })
      // }
    },
    getStorageUseAsync (storageKey) {
      var storageValue=''
      storage.get({
        key: storageKey,
        success: function(data) {
          console.log('handling success')
          storageValue=data
          prompt.showToast({
            message:  'value : '+data
          })
        },
        fail: function(data, code) {
          console.log(`handling fail, code = ${code}`)
        }
      })

      return storageValue;
      // const ret = storage.get({ key: storageKey })
      // this.writeObj(ret)
      // prompt.showToast({
      //   message: 'value: ' + ret
      // })
      // return ret.data
    },
    writeObj(obj){
      var description = "";
      for (var i in obj) {
        var property = obj[i];
        description += i + " = " + property + "\n";
        if(property instanceof Object){
          this.writeObj(property)
        }
      }
      prompt.showToast({
        message:  description
      })
    }
  }
</script>
