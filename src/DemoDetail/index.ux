<template>
    <!-- template里只能有一个根节点 -->
    <div class="demo-page">
        <div class="item">
            <text>任务名</text>
            <input class="item-input" type="text" value="{{task.name}}" placeholder="任务名"
                   onchange="updateData('name')"></input>
        </div>
        <div class="item">
            <text>开始时间</text>
            <input class="item-input" type="text" value="{{task.startTime}}" placeholder="开始时间"
                   onchange="updateData('startTime')"></input>
        </div>
        <div class="item">
            <text>开始日期</text>
            <picker class="item-input" type="date" value="{{task.startDate}}" selected="{{task.startDate}}" onchange="getDate('startDate')"/>
        </div>
        <div class="item">
            <text>开始时间</text>
            <picker class="item-input" type="time" value="{{task.startDateTime}}" onchange="getTime('startDateTime')" />
        </div>
        <div class="item">
            <text>{{task.startDate}}--{{task.startDateTime}}</text>
        </div>
        <div class="item">
            <text>结束时间</text>
            <input class="item-input" type="text" value="{{task.endTime}}" placeholder="结束时间"
                   onchange="updateData('endTime')"></input>
        </div>
        <div class="item">
            <text>提前提醒</text>
            <input class="item-input" type="text" value="{{task.tipsTime}}" placeholder="提前多少分钟提醒"
                   onchange="updateData('tipsTime')"></input>
        </div>
        <input class="btn" type="button" value="创建任务" onclick="insertEvent"></input>
    </div>
</template>

<style>
    .demo-page {
        flex-direction: column;
    }

    .title {
        font-size: 40px;
        text-align: center;
    }
    .item {
        height: 100px;
        border-bottom-width: 1px;
        border-bottom-color: #cccccc;
    }
    .item-input {
        flex: 1;
        margin-left: 10px;
        font-size: 30px;
    }

    .btn {
        width: 750px;
        height: 86px;
        margin-top: 75px;
        border-radius: 43px;
        background-color: #09ba07;
        font-size: 30px;
        color: #ffffff;
    }
</style>

<script>
  import calendar from '@system.calendar'
  import prompt from '@system.prompt'

  export default {
    private: {
      text: '创建新任务',
      task: {
        name: '',
        startDate: '2018-11-01',
        startDateTime: '',
        startTime: new Date(new Date().valueOf()+(new Date('2018-11-27 17:30:00')-new Date('2018-11-27 17:00:00'))),
        endTime: new Date(new Date().valueOf()+(new Date('2018-11-27 17:40:00')-new Date('2018-11-27 17:00:00'))),
        tipsTime: '15',
        done: false
      }
    },
    updateData(name, e) {
      this.task[name] = e.text
    },
    insertEvent() {
      const self = this
      if (self.task.name && self.task.startTime) {
        prompt.showToast({
          message: self.task.name + ' 任务将在' + self.task.startTime + '执行，并提前' + self.task.tipsTime + '分钟提醒！'
        })
      } else {
        prompt.showToast({
          message: '任务名，开始时间为必填项！'
        })
      }

      if (self.task.name && self.task.startTime) {
        calendar.insert({
          title: self.task.name,
          description: '',
          startDate: new Date(self.task.startTime).valueOf(),
          endDate: new Date(self.task.endTime).valueOf(),
          remindMinutes: [self.task.tipsTime],
          success: function(ret){
            prompt.showToast({
              message: '插入成功，id:' + ret
            })
          },
          fail: function(erromsg, errocode){
            console.info(`### calendar.insert ### ${errocode}: ${erromsg}`)
            prompt.showToast({
              message: new Date(self.task.startTime).valueOf()
            })
            prompt.showToast({
              message: `${errocode}: ${erromsg}`
            })
          }
        })
      }

    },

    /**
     * 当用户点击菜单按钮时触发，调用app中定义的方法showMenu
     * 注意：使用加载器测试`创建桌面快捷方式`功能时，请先在`系统设置`中打开`应用加载器`的`桌面快捷方式`权限
     */
    onMenuPress() {
      this.$app.$def.showMenu()
    },
    //时间格式化函数，此处仅针对yyyy-MM-dd hh:mm:ss 的格式进行格式化
    dateFormat:function(time) {
      var date=new Date(time);
      var year=date.getFullYear();
      /* 在日期格式中，月份是从0开始的，因此要加0
       * 使用三元表达式在小于10的前面加0，以达到格式统一  如 09:11:05
       * */
      var month= date.getMonth()+1<10 ? "0"+(date.getMonth()+1) : date.getMonth()+1;
      var day=date.getDate()<10 ? "0"+date.getDate() : date.getDate();
      var hours=date.getHours()<10 ? "0"+date.getHours() : date.getHours();
      var minutes=date.getMinutes()<10 ? "0"+date.getMinutes() : date.getMinutes();
      var seconds=date.getSeconds()<10 ? "0"+date.getSeconds() : date.getSeconds();
      // 拼接
      return year+"-"+month+"-"+day+" "+hours+":"+minutes+":"+seconds;
    },
    onReady () {
      this.task.startTime=this.dateFormat(this.task.startTime)
      this.task.endTime=this.dateFormat(this.task.endTime)
      console.info(`触发：onReady`)
    },
    getDate (name,e) {
      this.task[name] = e.year + '-' + (e.month + 1) + '-' + e.day
    },
    getTime (name,e) {
      this.task[name] = e.hour + ':' + e.minute
    },

  }
</script>
